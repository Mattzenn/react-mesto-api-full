{"ast":null,"code":"export const BASE_URL = 'http://localhost:3001';\nconst jwt = localStorage.getItem('token');\n\nconst handleResponse = response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`);\n\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password: password,\n      email: email\n    })\n  }).then(handleResponse);\n};\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password: password,\n      email: email\n    })\n  }).then(handleResponse).then(data => console.log(`этоооооооо онннннннн на фронте ${data}`)); // .then(data => localStorage.setItem('token', data.token))\n};\nexport const getContent = token => {\n  console.log(`токен для проверки ${token}`);\n  return fetch(`${BASE_URL}/users/`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(handleResponse);\n};","map":{"version":3,"sources":["/Users/zeninmatvey/Desktop/dev/react-mesto-api-full/frontend/src/utils/auth.jsx"],"names":["BASE_URL","jwt","localStorage","getItem","handleResponse","response","ok","json","Promise","reject","status","register","password","email","fetch","method","headers","Authorization","body","JSON","stringify","then","authorize","data","console","log","getContent","token"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAjB;AACP,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AAEA,MAAMC,cAAc,GAAGC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,GAAcD,QAAQ,CAACE,IAAT,EAAd,GAAgCC,OAAO,CAACC,MAAR,CAAgB,UAASJ,QAAQ,CAACK,MAAO,EAAzC,CAAnE;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACzC,SAAOC,KAAK,CAAE,GAAEd,QAAS,SAAb,EAAuB;AAC/Be,IAAAA,MAAM,EAAE,MADuB;AAG/BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAG,UAAShB,GAAI,EADxB;AAEL,sBAAgB;AAFX,KAHsB;AAO/BiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,MAAAA,KAAK,EAAEA;AAA7B,KAAf;AAPyB,GAAvB,CAAL,CASFQ,IATE,CASGjB,cATH,CAAP;AAUH,CAXM;AAaP,OAAO,MAAMkB,SAAS,GAAG,CAACV,QAAD,EAAWC,KAAX,KAAqB;AAC1C,SAAOC,KAAK,CAAE,GAAEd,QAAS,SAAb,EAAuB;AAC/Be,IAAAA,MAAM,EAAE,MADuB;AAG/BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAG,UAAShB,GAAI,EADxB;AAEL,sBAAgB;AAFX,KAHsB;AAO/BiB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,MAAAA,KAAK,EAAEA;AAA7B,KAAf;AAPyB,GAAvB,CAAL,CASFQ,IATE,CASGjB,cATH,EAUFiB,IAVE,CAUGE,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAa,kCAAiCF,IAAK,EAAnD,CAVX,CAAP,CAD0C,CAY1C;AACH,CAbM;AAeP,OAAO,MAAMG,UAAU,GAAIC,KAAD,IAAW;AACjCH,EAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBE,KAAM,EAAxC;AACA,SAAOb,KAAK,CAAE,GAAEd,QAAS,SAAb,EAAuB;AAC/Be,IAAAA,MAAM,EAAE,KADuB;AAG/BC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB,kBAFX;AAGL,uBAAkB,UAASW,KAAM;AAH5B;AAHsB,GAAvB,CAAL,CASFN,IATE,CASGjB,cATH,CAAP;AAUH,CAZM","sourcesContent":["export const BASE_URL = 'http://localhost:3001'\nconst jwt = localStorage.getItem('token')\n\nconst handleResponse = response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`)\n\nexport const register = (password, email) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ password: password, email: email })\n    })\n        .then(handleResponse)\n}\n\nexport const authorize = (password, email) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ password: password, email: email })\n    })\n        .then(handleResponse)\n        .then(data => console.log(`этоооооооо онннннннн на фронте ${data}`))\n    // .then(data => localStorage.setItem('token', data.token))\n}\n\nexport const getContent = (token) => {\n    console.log(`токен для проверки ${token}`)\n    return fetch(`${BASE_URL}/users/`, {\n        method: 'GET',\n\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`,\n        }\n    })\n        .then(handleResponse)\n}"]},"metadata":{},"sourceType":"module"}