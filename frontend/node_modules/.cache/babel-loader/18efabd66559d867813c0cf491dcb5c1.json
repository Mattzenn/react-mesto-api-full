{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } // если ошибка, отклоняем промис\n\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getCards() {\n    return fetch(this._url + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  getApiUserInfo() {\n    return fetch(this._url + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  setApiUserInfo(newdata) {\n    return fetch(this._url + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newdata.name,\n        about: newdata.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  postCards(data) {\n    return fetch(this._url + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(data) {\n    return fetch(this._url + `/cards/${data}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  setAvatar(data) {\n    return fetch(this._url + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(this._url + `/cards/${id}/likes`, {\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  deleteLike(data) {\n    return fetch(this._url + `/cards/likes/${data}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst token = localStorage.getItem('token');\nconsole.log(`Это ${token}`);\nconst api = new Api({\n  url: 'http://localhost:3001',\n  headers: {\n    Authorization: `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/zeninmatvey/Desktop/dev/react-mesto-api-full/frontend/src/utils/api.js"],"names":["Api","constructor","config","_url","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getCards","fetch","method","then","getApiUserInfo","setApiUserInfo","newdata","body","JSON","stringify","name","about","postCards","data","link","deleteCard","setAvatar","avatar","changeLikeCardStatus","id","isLiked","deleteLike","token","localStorage","getItem","console","log","api","Authorization"],"mappings":"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","sourcesContent":["class Api {\n    constructor(config) {\n        this._url = config.url\n        this._headers = config.headers\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n\n        // если ошибка, отклоняем промис\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    getCards() {\n        return fetch(this._url + '/cards', {\n\n            method: 'GET',\n            headers: this._headers\n        })\n            .then(this._checkResponse);\n    }\n\n    getApiUserInfo() {\n        return fetch(this._url + '/users/me', {\n\n            method: 'GET',\n            headers: this._headers\n        })\n            .then(this._checkResponse);\n    }\n\n    setApiUserInfo(newdata) {\n        return fetch(this._url + '/users/me', {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: newdata.name,\n                about: newdata.about\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    postCards(data) {\n        return fetch(this._url + '/cards', {\n\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    deleteCard(data) {\n        return fetch(this._url + `/cards/${data}`, {\n\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(this._checkResponse);\n    }\n\n    setAvatar(data) {\n        return fetch(this._url + '/users/me/avatar', {\n\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.avatar\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    changeLikeCardStatus(id, isLiked) {\n        return fetch(this._url + `/cards/${id}/likes`, {\n\n            method: `${isLiked ? 'PUT' : 'DELETE'}`,\n            headers: this._headers\n        })\n            .then(this._checkResponse)\n    }\n\n    deleteLike(data) {\n        return fetch(this._url + `/cards/likes/${data}`, {\n\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(this._checkResponse);\n    }\n}\n\nconst token = localStorage.getItem('token')\n\nconsole.log(`Это ${token}`)\n\nconst api = new Api({\n    url: 'http://localhost:3001',\n    headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    }\n})\n\nexport default api"]},"metadata":{},"sourceType":"module"}