{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } // если ошибка, отклоняем промис\n\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getCards() {\n    return fetch(this._url + '/cards', {\n      credentials: 'include',\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  getApiUserInfo() {\n    return fetch(this._url + '/users/me', {\n      credentials: 'include',\n      method: 'GET',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  setApiUserInfo(newdata) {\n    return fetch(this._url + '/users/me', {\n      credentials: 'include',\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: newdata.name,\n        about: newdata.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  postCards(data) {\n    return fetch(this._url + '/cards', {\n      credentials: 'include',\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(data) {\n    return fetch(this._url + `/cards/${data}`, {\n      credentials: 'include',\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  setAvatar(data) {\n    return fetch(this._url + '/users/me/avatar', {\n      credentials: 'include',\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(this._url + `/cards/${id}/likes`, {\n      credentials: 'include',\n      method: `${isLiked ? 'PUT' : 'DELETE'}`,\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n  deleteLike(data) {\n    return fetch(this._url + `/cards/likes/${data}`, {\n      credentials: 'include',\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n\n}\n\nconst token = localStorage;\nconst api = new Api({\n  url: 'http://localhost:3001',\n  credentials: 'include',\n  headers: {\n    Authorization: `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/zeninmatvey/Desktop/dev/react-mesto-api-full/frontend/src/utils/api.js"],"names":["Api","constructor","config","_url","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getCards","fetch","credentials","method","then","getApiUserInfo","setApiUserInfo","newdata","body","JSON","stringify","name","about","postCards","data","link","deleteCard","setAvatar","avatar","changeLikeCardStatus","id","isLiked","deleteLike","token","localStorage","api","Authorization"],"mappings":"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","sourcesContent":["class Api {\n    constructor(config) {\n        this._url = config.url\n        this._headers = config.headers\n    }\n\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n\n        // если ошибка, отклоняем промис\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    getCards() {\n        return fetch(this._url + '/cards', {\n            credentials: 'include',\n            method: 'GET',\n            headers: this._headers\n        })\n            .then(this._checkResponse);\n    }\n\n    getApiUserInfo() {\n        return fetch(this._url + '/users/me', {\n            credentials: 'include',\n            method: 'GET',\n            headers: this._headers\n        })\n            .then(this._checkResponse);\n    }\n\n    setApiUserInfo(newdata) {\n        return fetch(this._url + '/users/me', {\n            credentials: 'include',\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: newdata.name,\n                about: newdata.about\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    postCards(data) {\n        return fetch(this._url + '/cards', {\n            credentials: 'include',\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    deleteCard(data) {\n        return fetch(this._url + `/cards/${data}`, {\n            credentials: 'include',\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(this._checkResponse);\n    }\n\n    setAvatar(data) {\n        return fetch(this._url + '/users/me/avatar', {\n            credentials: 'include',\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.avatar\n            })\n        })\n            .then(this._checkResponse);\n    }\n\n    changeLikeCardStatus(id, isLiked) {\n        return fetch(this._url + `/cards/${id}/likes`, {\n            credentials: 'include',\n            method: `${isLiked ? 'PUT' : 'DELETE'}`,\n            headers: this._headers\n        })\n            .then(this._checkResponse)\n    }\n\n    deleteLike(data) {\n        return fetch(this._url + `/cards/likes/${data}`, {\n            credentials: 'include',\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(this._checkResponse);\n    }\n}\n\nconst token = localStorage\n\nconst api = new Api({\n    url: 'http://localhost:3001',\n    credentials: 'include',\n    headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n    }\n})\n\nexport default api"]},"metadata":{},"sourceType":"module"}